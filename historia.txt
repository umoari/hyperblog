Esta es la historia de Ariel Ureña por el mundo de la programación.

Ariel empezó a estudiar en Platzi hace dos meses y ha terminado algunos cursos hasta la fecha.

En Junio, tras haber terminado el curso de Responsive Design, ahora se adentra en el maravilloso mundo de Git.

Al principio, se sentía intimidado por un software del que no sabía nada, pero poco a poco comenzó a entenderlo mejor.

Ya ha practicado mucho algunos comandos de Git, son muchos (como los pokemones), hasta ahora ya sabe usar:
git init *dentro de nuestra carpeta de trabajo
git add *nombreArchivo.extension 
git add *. para agregar todos los archivos dentro de la carpeta
git status
git commit

git log
git log --stat (muestra los stats de los cambios hechos)
git diff hashVersion hashVersion

git reset hashSHA-1 --hard/--soft (para volver a una version anterior)
git checkout hashSHA-1 archivo.extension (visualizar una version segun su hashSHA-1)
git checkout master archivo.extension (volver a la version mas actualizada del archivo)

Con estos comandos, Ariel ya sabe inicializar Git, agregar archivos al repositorio, revisar el estado de Git y guardar cambios.

Con git log y log --stat, Ariel ya aprendio a  revisar el historial dentro de Git y ver las estadisticas de los cambios.
Con git diff hashVersion hashVersion, Ariel aprendió a visualizar las diferencias entre dos versiones.

Ahora, está aprendiendo el comando git reset hashSHA-1 --hard/--soft para volver a una versión anterior dentro del repositorio según el hash SHA-1 designado.
Con git checkout hashSHA-1 archivo.extension se puede visualizar el archivo en una de sus versiones anteriores según el hash SHA-1 seleccionado, sólo se regresa a la versión pero no se guardan los cambios.
Si se quiere volver a la versión más actualizada, se puede utilizar git checkout master archivo.extension.

Cuando en la pantalla hay mas cambios que los que caben en la ventana, podemos salirnos del listado con Q.

**Fljo de trabajo con Git**
Ya vimos que para trabajar con Git de manera local tenemos 3 áreas: nuestro directorio de trabajo, nuestra área de staging y nuestro repositorio local.
De forma local, el fluo de trabajo es agregar un archivo a staging con git add y luego guardar los cambios con git commit.

De forma remota, el flujo de trabajo no es muy diferente. Primero hay que clonar el repositorio de trabajo con git clone url.
Una vez clonado el repositorio, tenemos en nuestro equipo local el directorio de trabajo, el área de staging y el repositorio local.
El flujo de trabajo es muy parecido: agregamos archivos a staging con git add, los guardamos con git commit y luego los enviamos al repositorio remoto con git push.
git fetch copia a nuestro repositorio local las actualizaciones de la base de datos del repositorio remoto.
git merge copia a nuestro repositorio local los archivos actualizados del servidor remoto.
git pull cumple con las funciones de git fetch y git pull al mismo tiempo.

git clone url
git push
git fetch
git merge
git pull

**Introducción a las ramas o branches de Git**
Antes de comenzar a aprender sobre el uso de ramas, primero hagamos cambios a nuestros archivos.
Después de haber cambiado podemos hacer commit con nuevos argumentos:

git commit -a (Se trackean archivos con cambios realizados y se les hace commit)
git commit -am (Junta la función de git commit -a y -m)

¿Cómo creamos ramas?
Es importante mencionar que las ramas se crean en el lugar donde nos encontramos, podemos verlo con git status.
Para crear una rama en Git utilizamos el comando git branch (nombre de la rama).
Para cambiarnos de una rama a otra utilizamos git checkout (nombre de la rama).

git branch (nombre de la rama)
git checkout (nombre de la rama)

--Recordemos que en VIM podemos salir y guardar con esc shift z z.

--Tambien es importante recordar que cada vez que nos cambiamos de una rama a otra, el archivo se queda en la versión HEAD de cada rama.

**Fusion de ramas con Git merge**
Seguimos trabajando con el uso de ramas. Esta vez vamos a hacer algunos cambios a index.html y styles.css dentro de nuestra rama cabecera.
Cada vez que cambiemos de rama es importante guardar los cambios y hacer un commit para no perderlos.
Guardamos los cambios, hacemos git commit -am "Mensajito" y se guarda el commit.
Ahora, nos cambiamos a la rama master con git checkout master.
Aparentemente se pierden los cambios, pero lo que en realidad pasa es que se muestra la versión head de cada rama cuando hacemos git checkout (nombre de la rama).

Ahora hacemos algunos cambios de contenido en index.html. Agregamos un párrafo con <p>.
Y en styles.css cambiamos el tipo de fuente a "Courier".
Guardamos los cambios con git commit -am "Mensajito".
Una vez guardados los cambios y hecho el commit podemos cambiarnos de rama con git checkout cabecera.

La fusión de ramas se realiza desde la rama donde uno se encuentra. Si estoy en master se va a unir el contenido de cabecera a master y desaparece la rama cabecera.
Un merge funciona como un commit, pues se agregan los cambios de la versión head de la rama indicada en el comando.

git branch (muestra un listado de las ramas que tiene nuestro repositorio y en verde la rama en la que nos encontramos)
git merge nombreRama (fusiona la rama indicada por su nombre a la rama donde nos encontramos)

--Por ahora, los cambios no ocasionaron ningún conflicto, pero eso lo veremos en la siguiente clase.

**Solucion de conflictos al hacer un merge**
En ocasaiones, como en la clase anterior, se pueden fusionar ramas de forma fluida y sin ningun error.
Pero si en las ramas que fusionamos con git merge hay cambios que se "contradicen" de una rama a otra, eso se llama conflicto.

Imaginemos que hacemos cambios en la rama master a una línea de código en HTML y otra en CSS.
Ahora en la rama cabecera hago modificaciones en las mismas líneas de código que en master.

Al querer fusionar ambas ramas con git merge, esa contradicción genera un conflicto, y la fusión no se completa.
En nuestros editores de código o en los archivos nos aparecen los conflictos encontrados y sugerencias para solucionarlos.
Una vez resueltos hay que hacer un commit.

Los conflictos son muy comunes y son el pan de cada día cuando trabajamos más de una persona en los mismos archivos.
Por eso es que Git es tan útil.

Lo importante es la comunicación, hablar sobre el conflicto con el equipo de trabajo y decidir qué código se queda y qué código se omite al resolver el conflicto.

**Uso de Github**
Git con esteroides. Es un superservidor donde podemos subir nuestro repositorio local y descargar archivos del repositorio remoto.

Lo primero que vamos a hacer es registrarnos en Github con nuestro correo electrónico, contraseña y usuario.

Una vez en Github creamos un nuevo repositorio. 
Le damos un nombre y descripción a nuestro repositorio.
Buenas prácticas: Iniciar nuestro repositorio con un README.md.
Las demás opciones las veremos en clases futuras.
Licencias o gitignore, para después.

--¿Cómo clonar un repositorio de Github a nuestro equipo local?--
Tenemos la opción de Clone or download, al darle clic copiames la url de nuestro repositorio.

git remote add origin https://github.com/umoari/hyperblog.git
Con este comando ya tenemos un origen remoto de nuestro repositorio de Git.

git remote
Nos muestra la palabra origin, eso quiere decir que ese origin existe en nuestro repositorio de Git.

git remote -v
Nos muuestra lo siguiente
origin https://github.com/umoari/hyperblog.git (fetch)
origin https://github.com/umoari/hyperblog.git (push)

Esto quiere decir que a origin podemos hacer fetch, traer y push enviar. Listo.

git push origin master
Con esto, estamos diciendo que vamos a enviar (push) a origin nuestra rama master.
Nos va a aparecer una pequeña ventana para ingresar nuestras credenciales de Github.
Nos va a dar errores: en pocas palabras es que los archivos del repositorio remoto no están en nuestro repositorio local.

git pull origin master
Así que hagamos pull.
Con esto nos traemos los archivos de nuestro repositorio remoto.
Aunque tenemos un error, que porque tenemos archivos diferentes, git no permite que se fusionen tales historias.

git pull origin master --allow-unrelated-histories
Con esto, estamos forzando y permitimos fusionar el historial remoto a nuestro repositorio local.
Nos manda a VIM y guardamos con Shift Esc z z.

git push origin master
Ahora ya podemos enviar nuestro master local a nuestro repositorio de Github.
Ya podemos revisar el historial de comits con Blame.
Los cambios aparecen con el usuario vinculado al correo electrónico que registramos en Git.

En git ya podemos modificar archivos y agregar commits.
¿Cómo nos traemos esos cambios a nuestro repositorio local?
git pull origin master

git remote add origin https://github.com/umoari/hyperblog.git (Se trae ese origin a nuestra base de datos)
git remote (visualizar que nuestro origin existe)
git remote -v (visualizar los verbos que podemos usar con origin: push y pull)
git push origin master (enviar repositorio local a origin a la rama designada)
git pull origin master (traer repositorio origin a nuestro repositorio local a la rama designada)
git pull origin master --allow-unrelated-histories (lo mismo que la anterior, pero forzando unión de historias no relacionadas)